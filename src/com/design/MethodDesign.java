

package com.design;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

import com.beans.Constants;
import com.beans.MethodBean;
import com.beans.TestCaseBean;
import com.utils.Utilities;

/**
 * 
 * @author __USER__
 */
public class MethodDesign extends javax.swing.JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	Utilities utilities;
	Boolean callMethodFlag;
	Boolean testcaseFlag;
	
	public MethodDesign() {
		try {
			String inf = "com.sun.java.swing.plaf.windows.WindowsLookAndFeel";

			UIManager.setLookAndFeel(inf);

		} catch (Exception e) {
			e.printStackTrace();
		}
		initComponents();
	}

	public void searchMethodCalls(Utilities utilities) {
		// TODO Auto-generated method stub
		this.utilities = utilities;
		HashMap<Class<?>, List<MethodBean>> mapAllMethods = utilities.generateMethodCalls();
		utilities.getInstanceBean().setMapAllMethods(mapAllMethods);
		
	 Iterator<Class<?>> iterator=	mapAllMethods.keySet().iterator();
		while (iterator.hasNext()) {
			Class<?> class1 = (Class<?>) iterator.next();
			
			List<MethodBean> methodBeanLst = mapAllMethods.get(class1);
			
			for (MethodBean methodBean : methodBeanLst) {
				dftMethods.addRow(new Object[] { 
						class1.getName(),
						methodBean.getModifiersName(),
						methodBean.getMethodName(), 
						utilities.getParameterString(methodBean.getParameterTypes()),
						methodBean.getReturnType().toString()});
			}
			
		}
		
		JOptionPane.showMessageDialog(null, "Finding an adequate sequence of method calls has been completed.");
		callMethodFlag = Boolean.TRUE;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		jScrollPane1 = new javax.swing.JScrollPane();
		jPanel2 = new javax.swing.JPanel();
		btnCallMethods = new javax.swing.JButton();
		btnSend = new javax.swing.JButton();
		jLabel5 = new javax.swing.JLabel();
		btnQuit = new javax.swing.JButton();
		jPanel3 = new javax.swing.JPanel();
		tblMethods = new javax.swing.JTable();
		tblMethodCalls = new javax.swing.JTable();

		setDefaultCloseOperation(3);
		getContentPane().setLayout(null);

		jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Method Calls"));
		jPanel1.setLayout(null);

		dftMethods = new DefaultTableModel();
		tblMethods.setModel(dftMethods);
		jScrollPane1.setViewportView(tblMethods);
		
		dftMethods.addColumn("Class Name");
		dftMethods.addColumn("Modifier Name");
		dftMethods.addColumn("Method Name");
		dftMethods.addColumn("Parameter Types");
		dftMethods.addColumn("Return Type");

		jPanel1.add(jScrollPane1);
		jScrollPane1.setBounds(20, 20, 680, 170);

		getContentPane().add(jPanel1);
		jPanel1.setBounds(20, 70, 720, 200);

		jPanel2.setBorder(javax.swing.BorderFactory
				.createTitledBorder("Call Method for Test Target"));
		jPanel2.setLayout(null);

		btnCallMethods.setText("Call the Methods");
		btnCallMethods.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnGenerateInstanceActionPerformed(evt);
			}
		});
		jPanel2.add(btnCallMethods);
		btnCallMethods.setBounds(100, 20, 160, 23);

		
		
		
		JScrollPane jspIns = new javax.swing.JScrollPane();
		
		dftMethodCalls = new DefaultTableModel();
		tblMethodCalls.setModel(dftMethodCalls);
		jspIns.setViewportView(tblMethodCalls);
		
		dftMethodCalls.addColumn("Class Name");
		dftMethodCalls.addColumn("Method Name");
		dftMethodCalls.addColumn("Test case Eligibility");
		dftMethodCalls.addColumn("Parameter Validation");
		dftMethodCalls.addColumn("Return Type Validation");
		
		jPanel2.add(jspIns);
		jspIns.setBounds(20, 50, 680, 170);

		btnSend.setText("Generate Test Cases");
		btnSend.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnFindingMethodCallsActionPerformed(evt);
			}
		});
		jPanel2.add(btnSend);
		btnSend.setBounds(20, 230, 230, 23);

		getContentPane().add(jPanel2);
		jPanel2.setBounds(20, 280, 720, 280);

		jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18));
		jLabel5.setForeground(new java.awt.Color(51, 51, 255));
		jLabel5.setText("Instance Generator");
		getContentPane().add(jLabel5);
		jLabel5.setBounds(230, 14, 700, 30);

		btnQuit.setText("Exit");
		btnQuit.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnQuitActionPerformed(evt);
			}
		});
		getContentPane().add(btnQuit);
		btnQuit.setBounds(630, 570, 75, 23);

		jPanel3.setLayout(null);
		getContentPane().add(jPanel3);
		jPanel3.setBounds(0, 0, 740, 430);

		setSize(800, 630);
		setTitle("Instance Generator::");
		setResizable(false);
		setVisible(true);
	}// </editor-fold>

	// GEN-END:initComponents

	private void btnQuitActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		System.exit(0);
	}

	private void btnFindingMethodCallsActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		
		if(testcaseFlag.compareTo(Boolean.TRUE) == 0){
			utilities.generateTestcases();
		}else{
			JOptionPane.showMessageDialog(null, "Please call the methos for test case target.");
		}
	}

	private void btnGenerateInstanceActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		
		if(callMethodFlag.compareTo(Boolean.TRUE) == 0){
			HashMap<Class<?>, List<MethodBean>> mapAllMethods = utilities.getInstanceBean().getMapAllMethods();
			
		 Iterator<Class<?>> iterator=	mapAllMethods.keySet().iterator();
		 final List<TestCaseBean> testCaseBeanLst = new ArrayList();
			while (iterator.hasNext()) {
				final Class<?> class1 = (Class<?>) iterator.next();
				
				final List<MethodBean> methodBeanLst = mapAllMethods.get(class1);
				
				new Thread(){
					public void run() {
				for (MethodBean methodBean : methodBeanLst) {
					
					String testcaseElig = "";
					String paramVal = "";
					String returnTypeVal = "";
					
					TestCaseBean testCaseBean = new TestCaseBean();
					
					if(methodBean.getModifiersName().compareTo(Constants.PRIVATE) == 0){
						testcaseElig = Constants.TESTCASE_ELIGIBILITY_NO;
						paramVal = Constants.VALIDATION_NA;
						returnTypeVal = Constants.VALIDATION_NA;
					}else if(methodBean.getModifiersName().compareTo(Constants.PUBLIC) == 0 
							|| methodBean.getModifiersName().compareTo(Constants.PROTECTED) == 0){
						testcaseElig = Constants.TESTCASE_ELIGIBILITY_YES;
						
						if(methodBean.getParameterTypes().size() >0){
							paramVal = Constants.VALIDATION_YES;	
						}else{
							paramVal = Constants.VALIDATION_NO;
						}
						
						if(methodBean.getReturnType().toString().compareTo(Constants.VOID) == 0){
							returnTypeVal = Constants.VALIDATION_NO;
						}else{
							returnTypeVal = Constants.VALIDATION_YES;
						}
					}
					
					dftMethodCalls.addRow(new Object[] { 
							class1.getName(),
							methodBean.getMethodName(), 
							testcaseElig,
							paramVal,
							returnTypeVal});
					
					testCaseBean.setClassName(class1.getName());
					testCaseBean.setMethodName(methodBean.getMethodName());
					testCaseBean.setTestcaseElig(testcaseElig);
					testCaseBean.setParamVal(paramVal);
					testCaseBean.setReturnTypeVal(returnTypeVal);
					testCaseBean.setMethodBean(methodBean);
					testCaseBeanLst.add(testCaseBean);
					
					try {
						Thread.sleep(300);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
					};
				}.start();
				
			}
			
			utilities.getInstanceBean().setListOfTestCaseBean(testCaseBeanLst);
			testcaseFlag = Boolean.TRUE;
		}else{
			JOptionPane.showMessageDialog(null, "Something went wrong when attenpting method calls.");
		}
	}
	
	private javax.swing.JButton btnCallMethods;
	private javax.swing.JButton btnQuit;
	private javax.swing.JButton btnSend;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTable tblMethods;
	public DefaultTableModel dftMethods;
	private javax.swing.JTable tblMethodCalls;
	public DefaultTableModel dftMethodCalls;
	// End of variables declaration//GEN-END:variables

}